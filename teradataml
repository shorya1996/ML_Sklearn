from teradataml import create_context, DataFrame, case

# 1) connect (run in same kernel)
create_context(host="your_host", username="your_user", password="your_pw", logmech="LDAP")

# 2) load tables as proxy DataFrames (no data movement)
tx = DataFrame("your_db.txn_table")     # transactional table
acct = DataFrame("your_db.account_table")  # account reference table

# 3) apply any filters on each table first (best practice)
tx_f = tx[
    (tx.txn_date >= '2025-08-01') &
    (tx.txn_date <= '2025-08-31') &
    (tx.amount > 1000)
]

acct_f = acct[acct.status == 'ACTIVE']   # example small filter

# 4) join (use merge; specify how="inner"/"left" etc. and 'on' key(s))
# If column names clash, refer via left/right frame e.g. tx.account_id, acct.account_id
joined = tx_f.merge(acct_f, left_on="account_id", right_on="account_id", how="inner")

# 5) add a CASE WHEN column using teradataml.case
joined = joined.assign(
    amount_band = case(
        [(joined.amount > 10000, "High"),
         ((joined.amount >= 5000) & (joined.amount <= 10000), "Medium")],
        else_="Low"
    )
)

# 6) choose exactly 3 output columns (alias if you want)
# e.g., choose account_id, txn_date, amount_band (or amount instead of band)
result = joined[["account_id", "txn_date", "amount_band"]]

# 7) safe preview (only pulls small number)
print(result.head(20))

# 8) to pandas if needed (only small sample)
pdf = result.head(200).to_pandas()
print(pdf.head())
