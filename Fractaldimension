import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from scipy.stats import linregress

def build_fraud_signals(df, box_sizes=[0.1, 0.05, 0.01]):
    results = []

    for party_id, group in df.groupby('partyid'):
        group = group.sort_values('transferdate')
        group['time_gap'] = group['transferdate'].diff().dt.total_seconds().fillna(0)
        group['log_amount'] = np.log(group['transfer_amount'] + 1)

        # Skip if not enough variation
        if group['time_gap'].nunique() < 2 or group['log_amount'].nunique() < 2:
            continue

        # Normalize
        scaler = MinMaxScaler()
        normalized = scaler.fit_transform(group[['time_gap', 'log_amount']])
        group[['x', 'y']] = normalized

        # Fractal dimension via box counting
        box_counts = []
        for box_size in box_sizes:
            boxes = set()
            for _, row in group.iterrows():
                ix = int(np.floor(row['x'] / box_size))
                iy = int(np.floor(row['y'] / box_size))
                boxes.add((ix, iy))
            count = len(boxes) if len(boxes) > 0 else 1e-6
            box_counts.append(count)

        # Compute fractal dimension (slope of log-log)
        try:
            log_box_sizes = np.log(1 / np.array(box_sizes))
            log_counts = np.log(box_counts)
            slope, _, _, _, _ = linregress(log_box_sizes, log_counts)
            fractal_dimension = slope
        except Exception as e:
            fractal_dimension = 0  # Fallback if regression fails

        # Behavioral signals
        avg_gap = group['time_gap'].mean()
        bank_div = group['bankname'].nunique()
        utilization = (group['transfer_amount'] / group['credit_limit']).mean()
        variability = group['transfer_amount'].std()

        results.append({
            'partyid': party_id,
            'fractal_dimension': fractal_dimension,
            'avg_time_gap': avg_gap,
            'bank_diversity': bank_div,
            'limit_utilization_mean': utilization,
            'transfer_variability': variability
        })

    return pd.DataFrame(results)
