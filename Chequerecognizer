import streamlit as st
import sqlite3
import hashlib
import os
import json
import cv2
import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image
import tempfile
import difflib
import Levenshtein

# --- DB Setup ---
conn = sqlite3.connect("users.db", check_same_thread=False)
c = conn.cursor()

def init_db():
    c.execute('''CREATE TABLE IF NOT EXISTS users(username TEXT PRIMARY KEY, password TEXT, is_admin INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS user_data(username TEXT, filename TEXT, field TEXT, prediction TEXT, accuracy_metrics TEXT DEFAULT '{}')''')
    conn.commit()

def add_user(username, password, is_admin=0):
    c.execute('INSERT OR IGNORE INTO users(username, password, is_admin) VALUES (?, ?, ?)', (username, password, is_admin))
    conn.commit()

def login_user(username, password):
    c.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
    return c.fetchone()

def get_user_role(username):
    c.execute('SELECT is_admin FROM users WHERE username = ?', (username,))
    result = c.fetchone()
    return result[0] if result else 0

def save_user_file_data(username, filename, field, prediction, accuracy_metrics):
    c.execute('INSERT INTO user_data(username, filename, field, prediction, accuracy_metrics) VALUES (?, ?, ?, ?, ?)', 
              (username, filename, field, prediction, json.dumps(accuracy_metrics) if accuracy_metrics else '{}'))
    conn.commit()

def get_user_files(username):
    c.execute('SELECT filename, field, prediction, accuracy_metrics FROM user_data WHERE username = ?', (username,))
    return c.fetchall()

def get_all_users():
    c.execute('SELECT username, is_admin FROM users')
    return c.fetchall()

def get_all_predictions():
    c.execute('SELECT * FROM user_data')
    return c.fetchall()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# --- Model ---
model = load_model("cnn_digit.h5")

def preprocess_digit(img):
    img = cv2.resize(img, (28, 28))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.bitwise_not(img)
    img = img / 255.0
    img = img.reshape(1, 28, 28, 1)
    return img

def predict_digits(cropped_img):
    gray = cv2.cvtColor(cropped_img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    boxes = []
    for cnt in contours:
        x, y, w, h = cv2.boundingRect(cnt)
        if h > 10 and w > 5:
            digit = cropped_img[y:y+h, x:x+w]
            boxes.append((x, digit))
    boxes.sort(key=lambda b: b[0])
    prediction = ""
    for _, digit in boxes:
        p_img = preprocess_digit(digit)
        pred = np.argmax(model.predict(p_img, verbose=0))
        prediction += str(pred)
    return prediction

# --- Streamlit UI Setup ---
st.set_page_config(page_title="Cheque App", layout="wide")

if "auth" not in st.session_state:
    st.session_state.auth = None
if "predictions" not in st.session_state:
    st.session_state.predictions = []

init_db()

menu = ["Login", "Register"]
if st.session_state.auth:
    menu = ["App", "Logout"]
    if get_user_role(st.session_state.auth):
        menu.insert(1, "Admin")

choice = st.sidebar.selectbox("Menu", menu)

# --- Login/Register ---
if choice == "Login":
    st.subheader("🔐 Login")
    uname = st.text_input("Username")
    pwd = st.text_input("Password", type="password")
    if st.button("Login"):
        result = login_user(uname, hash_password(pwd))
        if result:
            st.session_state.auth = uname
            st.experimental_rerun()
        else:
            st.error("Invalid credentials")

elif choice == "Register":
    st.subheader("📋 Register")
    new_user = st.text_input("New Username")
    new_pwd = st.text_input("New Password", type="password")
    if st.button("Create Account"):
        add_user(new_user, hash_password(new_pwd))
        st.success("Account created. Please login.")

elif choice == "Logout":
    st.session_state.auth = None
    st.experimental_rerun()

# --- Admin Panel ---
elif choice == "Admin" and get_user_role(st.session_state.auth):
    st.subheader("🛠 Admin Panel")
    users = get_all_users()
    preds = get_all_predictions()

    st.markdown("### 👥 Users")
    st.table(users)

    st.markdown("### 📊 All Predictions")
    st.table(preds)

# --- Main App ---
elif choice == "App" and st.session_state.auth:
    st.title("📄 Cheque Digit Recognition")

    col1, col2 = st.columns(2)
    with col1:
        img_file = st.file_uploader("Upload cheque image", type=['jpg', 'png'])
    with col2:
        json_file = st.file_uploader("Upload annotation JSON", type=['json'])

    show_accuracy = st.checkbox("Show Accuracy Metrics")

    if img_file and json_file:
        img = Image.open(img_file).convert("RGB")
        img_np = np.array(img)
        st.image(img, caption="Cheque Image", use_column_width=True)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as tf:
            tf.write(json_file.read())
            tf_path = tf.name

        with open(tf_path) as f:
            data = json.load(f)

        st.session_state.predictions.clear()
        st.subheader("🔍 Predictions")
        for inst in data["instances"]:
            cls = inst.get("className", "")
            if cls in ["ChqNo", "DateIss", "Amt", "ACNO"]:
                points = inst["points"]
                x1 = int(points.get("x1", 0))
                y1 = int(points.get("y1", points.get("yl", 0)))
                x2 = int(points.get("x2", 0))
                y2 = int(points.get("y2", 0))
                crop = img_np[y1:y2, x1:x2]
                st.image(crop, caption=cls, width=200)
                pred = predict_digits(crop)

                accuracy_metrics = {}
                gt = st.text_input(f"Enter Ground Truth for {cls}", key=f"gt_{cls}")
                if show_accuracy and gt:
                    match_percent = difflib.SequenceMatcher(None, pred, gt).ratio() * 100
                    lev_dist = Levenshtein.distance(pred, gt)
                    accuracy_metrics = {
                        "match_percent": round(match_percent, 2),
                        "levenshtein": lev_dist
                    }
                    st.json(accuracy_metrics)

                st.session_state.predictions.append({
                    "filename": img_file.name,
                    "field": cls,
                    "prediction": pred,
                    "accuracy": accuracy_metrics
                })

        if st.button("💾 Save All Results"):
            for item in st.session_state.predictions:
                save_user_file_data(st.session_state.auth, item["filename"], item["field"], item["prediction"], item["accuracy"])
            st.success("All results saved!")

    st.subheader("📂 Your Prediction History")
    user_files = get_user_files(st.session_state.auth)

    fields = list(set(row[1] for row in user_files))
    filenames = list(set(row[0] for row in user_files))

    col1, col2 = st.columns(2)
    selected_field = col1.selectbox("Filter by Field", ["All"] + fields)
    selected_file = col2.selectbox("Filter by Filename", ["All"] + filenames)

    filtered = [r for r in user_files if (selected_field == "All" or r[1] == selected_field) and (selected_file == "All" or r[0] == selected_file)]

    for fname, field, preds, metrics in filtered:
        st.markdown(f"📁 **{fname}** — 🏷️ **{field}** → 🔢 `{preds}`")
        if metrics:
            st.json(json.loads(metrics))


✅ Integrated a single "Save All Results" button that stores both prediction and accuracy metrics (if available) into the database. The user_data table now includes an accuracy_metrics column to support this.

Let me know if you'd like the results shown in a downloadable format or editable later.
