import streamlit as st
import json
import cv2
import numpy as np
import pandas as pd
import tempfile
import os
from tensorflow.keras.models import load_model
from PIL import Image
from difflib import SequenceMatcher

# ------------------ Load Model -------------------
@st.cache_resource
def load_digit_model():
    model = load_model("cnn_digit.h5")  # Replace with actual path if needed
    return model

model = load_digit_model()

# ------------------ Metrics -------------------
def compute_metrics(pred, actual):
    max_len = max(len(pred), len(actual))
    matches = sum(1 for p, a in zip(pred, actual) if p == a)
    char_accuracy = matches / max_len if max_len else 0
    seq = SequenceMatcher(None, pred, actual)
    edit_distance = sum(n for op, i1, i2, j1, j2 in seq.get_opcodes() if op != 'equal')
    exact_match = int(pred == actual)
    return char_accuracy, edit_distance, exact_match

# ------------------ Preprocessing -------------------
def preprocess_digit(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY_INV)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    digit_imgs = []

    for cnt in sorted(contours, key=lambda c: cv2.boundingRect(c)[0]):
        x, y, w, h = cv2.boundingRect(cnt)
        if h > 10 and w > 5:
            digit = thresh[y:y+h, x:x+w]
            digit = cv2.resize(digit, (28, 28), interpolation=cv2.INTER_AREA)
            digit = digit.astype("float32") / 255.0
            digit_imgs.append(digit.reshape(28, 28, 1))

    return digit_imgs

# ------------------ Digit Prediction -------------------
def predict_digits(digit_imgs):
    if not digit_imgs:
        return ""
    preds = model.predict(np.array(digit_imgs), verbose=0)
    return ''.join(str(np.argmax(p)) for p in preds)

# ------------------ Streamlit UI -------------------
st.title("Cheque Digit Extractor & Evaluator")

image_file = st.file_uploader("Upload Cheque Image", type=["png", "jpg", "jpeg"])
json_file = st.file_uploader("Upload Annotation JSON", type=["json"])

if 'results_df' not in st.session_state:
    st.session_state.results_df = pd.DataFrame(columns=["Field", "Prediction", "Actual", "Char Accuracy", "Edit Distance", "Exact Match"])

if image_file and json_file:
    img = Image.open(image_file)
    img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)

    st.subheader("Cheque Image")
    st.image(img, use_column_width=True)

    data = json.load(json_file)
    predictions = []

    for inst in data["instances"]:
        cls = inst["className"]
        if cls not in ["ChqNo", "AccNo", "Amt", "DateIss"]:
            continue

        (x1, y1), (x2, y2) = inst["points"]
        x1, y1, x2, y2 = map(int, [x1, y1, x2, y2])
        cropped = img_cv[y1:y2, x1:x2]

        st.subheader(f"{cls}")
        st.image(cropped, caption=f"Cropped {cls}")

        digit_imgs = preprocess_digit(cropped)
        pred_str = predict_digits(digit_imgs)

        st.markdown(f"**Predicted:** `{pred_str}`")
        actual = st.text_input(f"Enter actual value for {cls}", key=f"actual_{cls}")

        if actual:
            acc, dist, exact = compute_metrics(pred_str, actual)
            st.write(f"Character Accuracy: `{acc:.2f}`")
            st.write(f"Edit Distance: `{dist}`")
            st.write(f"Exact Match: `{exact}`")

            predictions.append({
                "Field": cls,
                "Prediction": pred_str,
                "Actual": actual,
                "Char Accuracy": round(acc, 2),
                "Edit Distance": dist,
                "Exact Match": exact
            })

    if st.button("Save to CSV"):
        new_df = pd.DataFrame(predictions)
        st.session_state.results_df = pd.concat([st.session_state.results_df, new_df], ignore_index=True)
        csv_path = os.path.join(tempfile.gettempdir(), "cheque_predictions.csv")
        st.session_state.results_df.to_csv(csv_path, index=False)
        st.success("Saved results.")
        st.download_button("Download CSV", data=open(csv_path, "rb").read(), file_name="cheque_predictions.csv")

# Show saved results
if not st.session_state.results_df.empty:
    st.subheader("Saved Results")
    st.dataframe(st.session_state.results_df)
